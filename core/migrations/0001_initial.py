# Generated by Django 5.2 on 2025-07-28 11:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('business_owner', 'İşletme Sahibi'), ('customer', 'Müşteri'), ('staff', 'Personel'), ('kitchen_staff', 'Mutfak Personeli')], default='customer', max_length=20)),
                ('profile_image_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name="Profil Fotoğrafı URL'i")),
                ('staff_permissions', models.JSONField(blank=True, default=list, help_text='Personelin veya Mutfak Personelinin erişebileceği ekran/özellik anahtarlarının listesi (JSON formatında).')),
                ('notification_permissions', models.JSONField(blank=True, default=list, help_text="Kullanıcının abone olduğu bildirim olay türlerinin listesi (JSON formatında). Örn: ['order_approved_for_kitchen', 'waiting_customer_added']")),
                ('is_approved_by_admin', models.BooleanField(default=False, help_text='Yöneticinin bu kullanıcı hesabını onaylayıp onaylamadığını belirtir.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set_%(app_label)s_%(class)s', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set_%(app_label)s_%(class)s', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefon Numarası')),
                ('is_setup_complete', models.BooleanField(default=False, help_text='İşletme sahibi kurulum sihirbazını tamamladı mı?')),
                ('currency_code', models.CharField(choices=[('TRY', 'Türk Lirası (₺)'), ('USD', 'ABD Doları ($)'), ('EUR', 'Euro (€)'), ('GBP', 'İngiliz Sterlini (£)')], default='TRY', max_length=3, verbose_name='Para Birimi')),
                ('timezone', models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Ciudad_Juarez', 'America/Ciudad_Juarez'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Coyhaique', 'America/Coyhaique'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Nuuk', 'America/Nuuk'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Sydney', 'Australia/Sydney'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Kyiv', 'Europe/Kyiv'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zurich', 'Europe/Zurich'), ('GMT', 'GMT'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Kanton', 'Pacific/Kanton'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('US/Alaska', 'US/Alaska'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('UTC', 'UTC')], default='Europe/Istanbul', help_text='İşletmenin bulunduğu yerel zaman dilimi.', max_length=100, verbose_name='Zaman Dilimi')),
                ('owner', models.OneToOneField(help_text='Bu işletmenin sahibi olan kullanıcı.', limit_choices_to={'user_type': 'business_owner'}, on_delete=django.db.models.deletion.CASCADE, related_name='owned_business', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='associated_business',
            field=models.ForeignKey(blank=True, help_text="Kullanıcı 'Personel' veya 'Mutfak Personeli' tipindeyse hangi işletmeye bağlı olduğunu gösterir.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to='core.business'),
        ),
        migrations.CreateModel(
            name='KDSScreen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='KDS Ekran Adı')),
                ('slug', models.SlugField(blank=True, help_text='Bu KDS ekranı için benzersiz kısa ad (URL için). Otomatik oluşturulur.', max_length=120, unique=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Mi?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kds_screens', to='core.business', verbose_name='İşletme')),
            ],
            options={
                'verbose_name': 'KDS Ekranı',
                'verbose_name_plural': 'KDS Ekranları',
                'ordering': ['name'],
                'unique_together': {('business', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.URLField(blank=True, max_length=1024, null=True)),
                ('kdv_rate', models.DecimalField(decimal_places=2, default=10.0, help_text='Bu kategori için varsayılan KDV oranı (%). Örn: 10.00', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='core.business')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='core.category')),
                ('assigned_kds', models.ForeignKey(blank=True, help_text='Bu kategorideki ürünler hangi KDS ekranına yönlendirilecek?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories_routed_here', to='core.kdsscreen', verbose_name='Atanmış KDS Ekranı')),
            ],
            options={
                'verbose_name': 'Kategori',
                'verbose_name_plural': 'Kategoriler',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='accessible_kds_screens',
            field=models.ManyToManyField(blank=True, help_text='Personelin veya Mutfak Personelinin erişebileceği KDS ekranları.', related_name='authorized_staff', to='core.kdsscreen', verbose_name='Erişilebilir KDS Ekranları'),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.URLField(blank=True, max_length=1024, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_campaign_bundle', models.BooleanField(default=False, help_text='Bu menü öğesi bir kampanya paketini mi temsil ediyor?')),
                ('is_active', models.BooleanField(default=True, help_text='Pasif ürünler yeni siparişlerde görünmez ama eski raporlarda kalır.', verbose_name='Menüde Aktif Mi?')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Eğer varyant yoksa veya bu bir kampanya paketi ise ürünün fiyatı.', max_digits=10, null=True)),
                ('kdv_rate', models.DecimalField(decimal_places=2, default=10.0, help_text='Ürüne özel KDV oranı (%). Boş bırakılırsa kategorinin varsayılanı kullanılır.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='core.business')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='menu_items', to='core.category')),
            ],
            options={
                'verbose_name': 'Menü Öğesi',
                'verbose_name_plural': 'Menü Öğeleri',
                'ordering': ['name'],
                'unique_together': {('business', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CampaignMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Kampanya Adı')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('image', models.URLField(blank=True, max_length=1024, null=True, verbose_name='Kampanya Görseli')),
                ('campaign_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Kampanya Fiyatı')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Mi?')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Başlangıç Tarihi')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Bitiş Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='core.business')),
                ('bundle_menu_item', models.OneToOneField(blank=True, help_text='Bu kampanyayı temsil eden özel menü öğesi.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='represented_campaign', to='core.menuitem')),
            ],
            options={
                'verbose_name': 'Kampanya Menüsü',
                'verbose_name_plural': 'Kampanya Menüleri',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MenuItemVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_extra', models.BooleanField(default=False)),
                ('image', models.URLField(blank=True, max_length=1024, null=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='core.menuitem')),
            ],
            options={
                'verbose_name': 'Menü Varyantı',
                'verbose_name_plural': 'Menü Varyantları',
                'ordering': ['name'],
                'unique_together': {('menu_item', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_type', models.CharField(choices=[('table', 'Masa Siparişi'), ('takeaway', 'Takeaway Siparişi')], default='table', max_length=20)),
                ('customer_name', models.CharField(blank=True, max_length=100, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Oluşturulma Tarihi (Müşteri/Personel)')),
                ('approved_at', models.DateTimeField(blank=True, db_index=True, help_text='Personel tarafından onaylandığı veya mutfağa ilk iletildiği zaman.', null=True, verbose_name='Onaylanma/Mutfağa İletilme Tarihi')),
                ('kitchen_completed_at', models.DateTimeField(blank=True, db_index=True, help_text="Siparişin TÜM kalemlerinin mutfak tarafından 'hazır' olarak işaretlendiği zaman.", null=True, verbose_name='Mutfakta Hazır Olma Tarihi')),
                ('picked_up_by_waiter_at', models.DateTimeField(blank=True, db_index=True, help_text='Siparişin garson tarafından mutfaktan teslim alındığı zaman (müşteriye götürülmek üzere).', null=True, verbose_name='Garson Teslim Alma Tarihi')),
                ('delivered_at', models.DateTimeField(blank=True, db_index=True, help_text='Siparişin müşteriye teslim edildiği zaman.', null=True, verbose_name='Müşteriye Teslim Edilme Tarihi')),
                ('is_paid', models.BooleanField(db_index=True, default=False)),
                ('is_split_table', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending_approval', 'Onay Bekliyor'), ('approved', 'Onaylandı (Mutfağa İletildi)'), ('preparing', 'Mutfakta Hazırlanıyor'), ('ready_for_pickup', 'Mutfakta Hazır (Garson Bekliyor)'), ('ready_for_delivery', 'Teslime Hazır (Garson Aldı)'), ('rejected', 'Reddedildi'), ('completed', 'Tamamlandı (Ödendi)'), ('cancelled', 'İptal Edildi')], db_index=True, default='approved', help_text='Siparişin genel durumu.', max_length=30)),
                ('uuid', models.UUIDField(blank=True, db_index=True, default=uuid.uuid4, editable=False, help_text='Paket servis siparişleri için misafir menüsü QR kod linki.', null=True, unique=True)),
                ('total_kdv_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Toplam KDV Tutarı')),
                ('grand_total', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Genel Toplam (KDV Dahil)')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_orders', to='core.business')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_placed', to=settings.AUTH_USER_MODEL)),
                ('prepared_by_kitchen_staff', models.ForeignKey(blank=True, help_text='Siparişi mutfakta hazırlayan/onaylayan personel (Genel).', limit_choices_to=models.Q(('user_type__in', ['kitchen_staff', 'staff', 'business_owner'])), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_prepared_in_kitchen', to=settings.AUTH_USER_MODEL)),
                ('taken_by_staff', models.ForeignKey(blank=True, help_text='Siparişi alan/onaylayan garson veya işletme sahibi.', limit_choices_to=models.Q(('user_type', 'staff'), ('user_type', 'business_owner'), _connector='OR'), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_taken_by_staff', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sipariş',
                'verbose_name_plural': 'Siparişler',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CreditPaymentDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='credit_payment_details', to='core.order')),
            ],
            options={
                'verbose_name': 'Veresiye Detayı',
                'verbose_name_plural': 'Veresiye Detayları',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('table_user', models.CharField(blank=True, max_length=100, null=True)),
                ('delivered', models.BooleanField(default=False, help_text='Bu kalem müşteriye teslim edildi mi?')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Bu kalemin (ekstralar dahil) KDV hariç birim fiyatı.', max_digits=10)),
                ('is_awaiting_staff_approval', models.BooleanField(default=False, help_text='Bu kalem misafir tarafından eklendi ve personel onayı mı bekliyor?')),
                ('kds_status', models.CharField(blank=True, choices=[('pending_kds', 'KDS Beklemede'), ('preparing_kds', 'KDS Hazırlanıyor'), ('ready_kds', 'KDS Hazır'), ('picked_up_kds', 'Garson Aldı')], default='pending_kds', help_text="Bu sipariş kaleminin atandığı KDS'teki hazırlık durumu.", max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('waiter_picked_up_at', models.DateTimeField(blank=True, help_text='Kalemin garson tarafından mutfaktan alındığı zaman.', null=True, verbose_name='Garson Teslim Alma Zamanı (Kalem)')),
                ('kdv_rate', models.DecimalField(decimal_places=2, default=10.0, help_text='Bu ürün için sipariş anındaki KDV oranı.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('kdv_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Bu kalem için hesaplanan toplam KDV tutarı (birim KDV * adet).', max_digits=10)),
                ('item_prepared_by_staff', models.ForeignKey(blank=True, help_text="Bu kalemi KDS'te hazırlayan veya hazır işaretleyen personel.", limit_choices_to=models.Q(('user_type__in', ['kitchen_staff', 'staff', 'business_owner'])), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prepared_order_items', to=settings.AUTH_USER_MODEL)),
                ('menu_item', models.ForeignKey(help_text='Siparişe eklenen ana menü öğesi.', on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='core.menuitem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='core.order')),
                ('variant', models.ForeignKey(blank=True, help_text='Sipariş edilen ürünün varyantı (eğer varsa).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='order_items_as_variant', to='core.menuitemvariant')),
            ],
            options={
                'verbose_name': 'Sipariş Kalemi',
                'verbose_name_plural': 'Sipariş Kalemleri',
            },
        ),
        migrations.CreateModel(
            name='OrderItemExtra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extras', to='core.orderitem')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.menuitemvariant')),
            ],
            options={
                'verbose_name': 'Sipariş Kalemi Ekstrası',
                'verbose_name_plural': 'Sipariş Kalemi Ekstraları',
            },
        ),
        migrations.CreateModel(
            name='OrderTableUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_users', to='core.order')),
            ],
            options={
                'verbose_name': 'Sipariş Masa Kullanıcısı',
                'verbose_name_plural': 'Sipariş Masa Kullanıcıları',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('credit_card', 'Kredi Kartı'), ('cash', 'Nakit'), ('food_card', 'Yemek Kartı')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_info', to='core.order')),
            ],
            options={
                'verbose_name': 'Ödeme',
                'verbose_name_plural': 'Ödemeler',
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Örn: Sabah Vardiyası, Akşam Vardiyası', max_length=100)),
                ('start_time', models.TimeField(verbose_name='Başlangıç Saati')),
                ('end_time', models.TimeField(verbose_name='Bitiş Saati')),
                ('color', models.CharField(default='#3788D8', help_text='Takvimde görünecek renk kodu (Hex). Örn: #FF5733', max_length=7)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shifts', to='core.business', verbose_name='İşletme')),
            ],
            options={
                'verbose_name': 'Vardiya Şablonu',
                'verbose_name_plural': 'Vardiya Şablonları',
                'ordering': ['start_time'],
                'unique_together': {('business', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('track_stock', models.BooleanField(default=True, help_text='Bu ürünün stoğu takip edilecek mi? Pasif ise miktar ve uyarılar dikkate alınmaz.', verbose_name='Stok Takibi Aktif')),
                ('alert_threshold', models.PositiveIntegerField(blank=True, help_text='Stok bu sayının altına düştüğünde uyarı verilir. Boş bırakılırsa uyarı verilmez.', null=True, verbose_name='Uyarı Eşiği')),
                ('variant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='core.menuitemvariant')),
            ],
            options={
                'verbose_name': 'Stok',
                'verbose_name_plural': 'Stoklar',
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('INITIAL', 'Başlangıç Stoku'), ('ADDITION', 'Stok Girişi (Alım/Üretim)'), ('SALE', 'Satış'), ('RETURN', 'Müşteri İadesi'), ('ADJUSTMENT_IN', 'Sayım Düzeltme (Fazla)'), ('ADJUSTMENT_OUT', 'Sayım Düzeltme (Eksik)'), ('WASTAGE', 'Zayiat/Fire'), ('MANUAL_EDIT', 'Manuel Düzenleme')], max_length=20)),
                ('quantity_change', models.IntegerField()),
                ('quantity_before', models.PositiveIntegerField()),
                ('quantity_after', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('related_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements_as_order', to='core.order')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='core.stock')),
                ('user', models.ForeignKey(blank=True, help_text='Bu hareketi yapan kullanıcı.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='core.menuitemvariant')),
            ],
            options={
                'verbose_name': 'Stok Hareketi',
                'verbose_name_plural': 'Stok Hareketleri',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_number', models.PositiveIntegerField()),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='core.business')),
            ],
            options={
                'verbose_name': 'Masa',
                'verbose_name_plural': 'Masalar',
                'unique_together': {('business', 'table_number')},
            },
        ),
        migrations.AddField(
            model_name='order',
            name='table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='table_orders', to='core.table'),
        ),
        migrations.CreateModel(
            name='WaitingCustomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('party_size', models.PositiveIntegerField(default=1, help_text='Müşteri grubundaki kişi sayısı.')),
                ('notes', models.TextField(blank=True, help_text='Müşteri ile ilgili özel notlar.', null=True)),
                ('is_waiting', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('called_at', models.DateTimeField(blank=True, help_text='Müşterinin çağrıldığı zaman.', null=True)),
                ('seated_at', models.DateTimeField(blank=True, help_text='Müşterinin masaya oturtulduğu zaman.', null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waiting_customers', to='core.business')),
            ],
            options={
                'verbose_name': 'Bekleyen Müşteri',
                'verbose_name_plural': 'Bekleyen Müşteriler',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CampaignMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Miktar')),
                ('campaign_menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_items', to='core.campaignmenu')),
                ('menu_item', models.ForeignKey(help_text='Kampanyaya dahil edilecek ana ürün.', on_delete=django.db.models.deletion.CASCADE, to='core.menuitem')),
                ('variant', models.ForeignKey(blank=True, help_text='Eğer ürünün belirli bir varyantı kampanyaya dahilse.', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.menuitemvariant')),
            ],
            options={
                'verbose_name': 'Kampanya Menü Öğesi',
                'verbose_name_plural': 'Kampanya Menü Öğeleri',
                'unique_together': {('campaign_menu', 'menu_item', 'variant')},
            },
        ),
        migrations.CreateModel(
            name='Pager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=100, verbose_name='Cihaz ID (MAC vb.)')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cihaz Adı (Takma Ad)')),
                ('status', models.CharField(choices=[('available', 'Boşta'), ('in_use', 'Kullanımda'), ('charging', 'Şarj Oluyor'), ('low_battery', 'Düşük Batarya'), ('out_of_service', 'Servis Dışı')], default='available', max_length=20, verbose_name='Durum')),
                ('last_status_update', models.DateTimeField(auto_now=True, verbose_name='Son Durum Güncelleme')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Cihaz Notları')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagers', to='core.business', verbose_name='İşletme')),
                ('current_order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_pager_instance', to='core.order', verbose_name='Mevcut Atanmış Sipariş')),
            ],
            options={
                'verbose_name': 'Çağrı Cihazı (Pager)',
                'verbose_name_plural': 'Çağrı Cihazları (Pagerlar)',
                'ordering': ['business', 'name', 'device_id'],
                'unique_together': {('business', 'device_id')},
            },
        ),
        migrations.CreateModel(
            name='ScheduledShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Tarih')),
                ('staff', models.ForeignKey(limit_choices_to=models.Q(('user_type__in', ['staff', 'kitchen_staff'])), on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_shifts', to=settings.AUTH_USER_MODEL, verbose_name='Personel')),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_instances', to='core.shift', verbose_name='Vardiya')),
            ],
            options={
                'verbose_name': 'Planlanmış Vardiya',
                'verbose_name_plural': 'Planlanmış Vardiyalar',
                'ordering': ['date', 'shift__start_time'],
                'unique_together': {('staff', 'date')},
            },
        ),
    ]
